// Generated by gencpp from file industrial_msgs/SetDrivePowerRequest.msg
// DO NOT EDIT!


#ifndef INDUSTRIAL_MSGS_MESSAGE_SETDRIVEPOWERREQUEST_H
#define INDUSTRIAL_MSGS_MESSAGE_SETDRIVEPOWERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace industrial_msgs
{
template <class ContainerAllocator>
struct SetDrivePowerRequest_
{
  typedef SetDrivePowerRequest_<ContainerAllocator> Type;

  SetDrivePowerRequest_()
    : drive_power(false)  {
    }
  SetDrivePowerRequest_(const ContainerAllocator& _alloc)
    : drive_power(false)  {
  (void)_alloc;
    }



   typedef uint8_t _drive_power_type;
  _drive_power_type drive_power;





  typedef boost::shared_ptr< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetDrivePowerRequest_

typedef ::industrial_msgs::SetDrivePowerRequest_<std::allocator<void> > SetDrivePowerRequest;

typedef boost::shared_ptr< ::industrial_msgs::SetDrivePowerRequest > SetDrivePowerRequestPtr;
typedef boost::shared_ptr< ::industrial_msgs::SetDrivePowerRequest const> SetDrivePowerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator1> & lhs, const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.drive_power == rhs.drive_power;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator1> & lhs, const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace industrial_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad0065fa1febb42851b8c0a0493a1234";
  }

  static const char* value(const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad0065fa1febb428ULL;
  static const uint64_t static_value2 = 0x51b8c0a0493a1234ULL;
};

template<class ContainerAllocator>
struct DataType< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "industrial_msgs/SetDrivePowerRequest";
  }

  static const char* value(const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Direct method of turning drive power on and off\n"
"# NOTE: Motion commands will automatically to this if\n"
"# drive power is not on and a motion command is received.\n"
"\n"
"bool drive_power\n"
;
  }

  static const char* value(const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drive_power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetDrivePowerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::industrial_msgs::SetDrivePowerRequest_<ContainerAllocator>& v)
  {
    s << indent << "drive_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.drive_power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INDUSTRIAL_MSGS_MESSAGE_SETDRIVEPOWERREQUEST_H
